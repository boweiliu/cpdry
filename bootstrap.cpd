// everything before first `#if 0` and last `#endif` is summarily ignored by cpd compiler!! but we keep the newlines so line numbers match up.
#if 0
{ /* comments */ }
{ /* comments should be braces followed by c++ style comments. later we will attain the ability to infer the outer braces from just the slash star. */ }
{ /* also - we will be able to switch our brace character to parens later depending on language settings. */ }
{ /* also need to provide a tool to switch between those settings so people with different preferences can mutuallly understand each other more easily. */ }
{ /* how about full line comments? */ }
{ // this seems fine. this even works across lines if you remember the close parens. just note that you now cant have braces in your comments without escaping them with }} double braces or something. }

{ // NOTE: only support ascii for now }

{ // possible syntaxes for functions: }
{ #def void func ( ) { } }
{ #def func ( ) : void { } }
{ #def func ( ) { } }
{ #let func = { } } { // applies for the rest of the file ... }

{ // this starts a verbatim c/c++ block }
#else

// parse the thing
#include <iostream>
#include <fstream>
#include <string>
#include <memory>

static void close_infile(std::istream *fh) { dynamic_cast<std::ifstream *>(fh)->close(); }
static void close_outfile(std::ostream *fh) { dynamic_cast<std::ofstream *>(fh)->close(); }
template <class T>
static void no_op(T fh) { }

int main(int argc, const char ** argv) {
    std::unique_ptr<std::istream, decltype(&close_infile)> in_fp(nullptr, &no_op<std::istream *>);
    std::unique_ptr<std::ostream, decltype(&close_outfile)> out_fp(nullptr, &no_op<std::ostream *>);
    if (argc < 2) { // use std in
        in_fp = std::unique_ptr<std::istream, decltype(&close_infile)>(&std::cin, &no_op<std::istream *>);
        out_fp = std::unique_ptr<std::ostream, decltype(&close_outfile)>(&std::cout, &no_op<std::ostream *>);
    } else {
        std::string fname = argv[1];
        in_fp = std::unique_ptr<std::istream, decltype(&close_infile)>(new std::ifstream(fname.c_str()), &close_infile);
        // replace .cpd with .cpp
        std::string out_fname = fname.substr(0, fname.length() - 1) + "p";
        std::cout << "DEBUG" << out_fname << std::endl;
        out_fp = std::unique_ptr<std::ostream, decltype(&close_outfile)>(new std::ofstream(out_fname.c_str()), &close_outfile);
    }
    // now start reading lines of file
    std::string line;
    std::ostream &out_fh = *out_fp;
    while (std::getline(*in_fp, line)) {
        out_fh << line << std::endl;
    }
    
    return 0;
}

// this ends a verbatim c/c++ block
#endif
#if 0
{ // more stuff here }



{ // This ends the parsing
#endif
// everything before first `#if 0` and last `#endif` is summarily ignored by cpd compiler!!

