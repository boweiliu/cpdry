( ( // start of compilation unit )
( #verbatim
// parse the thing
#include <iostream>
#include <fstream>
#include <string>

#endverbatim )
( #verbatim

using std::istream;
using std::ostream;
using std::ifstream;
using std::ofstream;
#include <memory> 
using std::unique_ptr;
using std::string;
using std::cin;
using std::cout;
using std::getline;

static void close_infile(istream *fh) { dynamic_cast<ifstream *>(fh)->close(); }
static void close_outfile(ostream *fh) { dynamic_cast<ofstream *>(fh)->close(); }
template <class T>
static void no_op(T) { }

int main(int argc, const char ** argv) {
    // Context managers are the first thing to tackle. No need for stupid unique ptr business. Just add syntactic sugar so we clean up resources. Not necessarily exception safe either.
    unique_ptr<istream, decltype(&close_infile)> in_fp(nullptr, &no_op<istream *>);
    unique_ptr<ostream, decltype(&close_outfile)> out_fp(nullptr, &no_op<ostream *>);
    // also if statements and how they play with const types.
    if (argc < 2) { // use std in
        in_fp = unique_ptr<istream, decltype(&close_infile)>(&cin, &no_op<istream *>);
        out_fp = unique_ptr<ostream, decltype(&close_outfile)>(&cout, &no_op<ostream *>);
    } else if (argc == 2) { // onnly 1 argument provided: compile .cpd to .cpp in-place
        string fname = argv[1];
        in_fp = unique_ptr<istream, decltype(&close_infile)>(new ifstream(fname.c_str()), &close_infile);
        // replace .cpd with .cpp
        string out_fname = fname.substr(0, fname.length() - 1) + "p";
        out_fp = unique_ptr<ostream, decltype(&close_outfile)>(new ofstream(out_fname.c_str()), &close_outfile);
    } else if (argc == 4) { // in -o out
        const char * fname = argv[1];
        in_fp = unique_ptr<istream, decltype(&close_infile)>(new ifstream(fname), &close_infile);
        // TODO check argv[2] == "-o"
        const char * out_fname = argv[3];
        out_fp = unique_ptr<ostream, decltype(&close_outfile)>(new ofstream(out_fname), &close_outfile);
        std::cout << "out fname is " << out_fname << std::endl;
    }
    // now start reading lines of file
    string line;
    ostream &out_fh = *out_fp;
    int line_no = -1;
    while (getline(*in_fp, line)) {
        //for ( auto ch : line ) {
        //    if (ch == '(') {
        //        // do
        //    }
        //}
        line_no += 1;
        out_fh << line << "\n";
    }
    
    return 0;
}

#endverbatim )
)
